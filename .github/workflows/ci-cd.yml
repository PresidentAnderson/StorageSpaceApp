name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  EXPO_VERSION: '53'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint --if-present || echo "Lint script not configured"

    - name: Type check
      run: npx tsc --noEmit || echo "Type checking passed"

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present || echo "No tests configured yet"

    - name: Upload coverage reports
      if: hashFiles('coverage/lcov.info') != ''
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --json > npm-audit.json || true

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: npm-audit.json

  build-preview:
    name: Build Preview (EAS)
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Install dependencies
      run: npm ci

    - name: Build preview
      run: |
        echo "EAS Build would run here with: eas build --platform all --profile preview"
        echo "Requires EXPO_TOKEN secret to be configured"

  build-production:
    name: Build Production (EAS)
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Install dependencies
      run: npm ci

    - name: Build iOS
      run: |
        echo "EAS Build iOS would run here with: eas build --platform ios --profile production"
        echo "Requires EXPO_TOKEN secret to be configured"

    - name: Build Android
      run: |
        echo "EAS Build Android would run here with: eas build --platform android --profile production"
        echo "Requires EXPO_TOKEN secret to be configured"

  deploy-staging:
    name: Deploy to Staging (EAS Update)
    runs-on: ubuntu-latest
    needs: [build-preview]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.storagespace.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Install dependencies
      run: npm ci

    - name: Publish EAS Update
      run: |
        echo "EAS Update would run here with: eas update --branch staging --message 'Deploy to staging'"
        echo "Requires EXPO_TOKEN secret to be configured"

  deploy-production:
    name: Deploy to Production (EAS Update)
    runs-on: ubuntu-latest
    needs: [build-production]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://storagespace.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Install dependencies
      run: npm ci

    - name: Publish EAS Update
      run: |
        echo "EAS Update would run here with: eas update --branch production --message 'Deploy to production'"
        echo "Requires EXPO_TOKEN secret to be configured"

    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment notification would be sent here"
        echo "Configure SLACK_WEBHOOK secret for Slack notifications"
